name: Build Distribution

on: [ push ]

jobs:
  build_wheels:
    name: py${{ matrix.python }} on ${{ matrix.os }} using ${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_TEST_EXTRAS: test
      CIBW_TEST_REQUIRES: numpy
      CIBW_TEST_COMMAND: python -c "import zipline"; nosetests tests
      CIBW_BUILD_VERBOSITY: 1

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        os: [ macos-latest, ubuntu-latest ]
        python: [ 37, 38, 39 ]
        bitness: [ 64 ]
        manylinux_image: [ manylinux2010, manylinux2014 ]
        include:
          - os: macos-latest
            bitness: 64
            platform_id: macosx_x86_64
#          - os: windows-latest
#            bitness: 64
#            platform_id: win_amd64
          - os: ubuntu-latest
            bitness: 64
            platform_id: manylinux_x86_64
        exclude:
#          - os: windows-latest
#            manylinux_image: manylinux2010
          - os: macos-latest
            manylinux_image: manylinux2010


    steps:
      - name: Checkout zipline
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
#
      - name: Build and test wheels
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS_MACOS: x86_64 universal2 arm64
          CIBW_BEFORE_TEST_LINUX: >
            curl -L -o ta-lib-0.4.0-src.tar.gz  http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz &&
            tar xvfz ta-lib-0.4.0-src.tar.gz &&
            cd ta-lib &&
            ./configure &&
            make &&
            make install &&
            ldconfig &&
            pip install -U pip
          CIBW_BEFORE_TEST_MACOS: >
            brew install hdf5;
            brew install ta-lib;
            pip install -U pip

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

#  build_sdist:
#    name: Build source distribution
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/setup-python@v2
#        name: Install Python
#        with:
#          python-version: '3.8'
#
#      - name: Build sdist
#        run: |
#          pip install -U pip setuptools build
#          python -m build --sdist
#
#      - uses: actions/upload-artifact@v2
#        with:
#          path: dist/*.tar.gz

#  upload_pypi:
##    needs: [ build_wheels, build_sdist ]
#    needs: [ build_wheels ]
#    runs-on: ubuntu-latest
#    # upload to PyPI on every push (for now)
#    if: github.event_name == 'push'
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@master
#        with:
#          user: __token__
##          password: ${{ secrets.PYPI_TOKEN }}
#          password: ${{ secrets.TESTPYPI_TOKEN }}
#          repository_url: https://test.pypi.org/legacy/
