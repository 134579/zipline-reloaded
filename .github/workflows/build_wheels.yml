name: Zipline Wheels

on: [ push ]

jobs:
  build_wheels:
    name: py${{ matrix.python }} on ${{ matrix.os }} using ${{ matrix.platform_id }}-${{ matrix.manylinux_image }}
    runs-on: ${{ matrix.os }}
    env:
#      CIBW_TEST_EXTRAS: test
#      CIBW_TEST_COMMAND: svn export https://github.com/stefan-jansen/zipline-reloaded/trunk/tests; nosetests -w tests --ignore-files="test_security_list\.py"
      CIBW_TEST_COMMAND: python -c "import zipline; print(zipline.__version__)"
      CIBW_BEFORE_TEST_LINUX: >
        curl -L -o ta-lib-0.4.0-src.tar.gz  http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz &&
        tar xvfz ta-lib-0.4.0-src.tar.gz &&
        cd ta-lib &&
        ./configure &&
        make &&
        make install &&
        ldconfig
      CIBW_BEFORE_TEST_MACOS: >
        brew install freetype pkg-config gcc openssl hdf5 ta-lib
      CIBW_BEFORE_TEST_WINDOWS: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise conda\ta-lib\bld.bat
      CIBW_BUILD_VERBOSITY: 1

    strategy:
      # Ensure that a wheel builders continue even if another fails
      fail-fast: false
      matrix:
#        os: [ macos-latest, ubuntu-latest, windows-latest ]
        os: [ windows-latest ]
#        python: [ 37, 38, 39 ]
        python: [ 38 ]
#        manylinux_image: [ manylinux2010, manylinux2014 ]
        include:
#          - os: macos-latest
#            platform_id: macosx_x86_64
#          - os: ubuntu-latest
#            platform_id: manylinux_x86_64
          - os: windows-latest
            platform_id: win_amd64
#        exclude:
#          - os: macos-latest
#            manylinux_image: manylinux2010
#          - os: windows-latest
#            manylinux_image: manylinux2010

    steps:
      - name: Checkout zipline
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v2

      - uses: ilammy/msvc-dev-cmd@v1
      - name: Build something requiring CL.EXE
        run: |
          rmdir /s /q "C:\ta-lib\"
          powershell -Command "(New-Object Net.WebClient).DownloadFile('http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-msvc.zip', 'ta-lib-0.4.0-msvc.zip')"
          IF (%ERRORLEVEL% == 1); exit 1
          powershell -Command "Add-Type -AssemblyName System.IO.Compression.FileSystem;[System.IO.Compression.ZipFile]::ExtractToDirectory('ta-lib-0.4.0-msvc.zip', 'C:\')"
          IF (%ERRORLEVEL% == 1); exit 1
          pushd C:\ta-lib\c\
          pushd make\cdd\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          pushd make\cdr\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          pushd make\cmd\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          pushd make\cmr\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          pushd make\csd\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          pushd make\csr\win32\msvc
          nmake
          IF (%ERRORLEVEL% == 1); exit 1
          popd
          popd
          del ta-lib-0.4.0-msvc.zip

      - name: Build and test wheels
        uses: joerick/cibuildwheel@v1.10.0
        env:
          CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=10.14
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

#  build_sdist:
#    name: Build source distribution
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - uses: actions/setup-python@v2
#        name: Install Python
#        with:
#          python-version: '3.8'
#
#      - name: Build sdist
#        run: |
#          pip install -U pip setuptools build
#          python -m build --sdist
#
#      - uses: actions/upload-artifact@v2
#        with:
#          path: dist/*.tar.gz
#
#  upload_pypi:
#    needs: [ build_wheels, build_sdist ]
#    runs-on: ubuntu-latest
#    # upload to (Test)-PyPI on push with tag starting with v; diff by commit
#    if: startsWith(github.ref, 'refs/tags')
#    steps:
#      - uses: actions/download-artifact@v2
#        with:
#          name: artifact
#          path: dist
#
#      - name: publish to testpypi
#        uses: pypa/gh-action-pypi-publish@master
#        if: startsWith(github.event.head_commit.message, 'TEST')
#        with:
#          user: __token__
#          password: ${{ secrets.TESTPYPI_TOKEN }}
#          repository_url: https://test.pypi.org/legacy/
#      - name: publish to pypi
#        uses: pypa/gh-action-pypi-publish@master
#        if: startsWith(github.event.head_commit.message, 'PYPI')
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_TOKEN }}
