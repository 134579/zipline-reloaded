#!/usr/bin/env bash

# Consolidated installation script for use by both Travis and humans.
#
# First installs a known-good version of pip, then any requirements
# specified in the EXTERNAL_REQUIREMENTS environment variable (e.g.,
# coveralls); then installs the project requirements, constrained by
# etc/requirements_py38_locked.txt; then editably installs zipline itself.
#
# Forwards positional arguments to all invocations of pip install.

# Travis' env command doesn't permit options in the shebang line, so
# set them here.
set -euvxo pipefail

echo
echo "Installing zipline using $(which python)"
echo

# New releases of pip have frequently caused strange issues. Make sure
# we know exactly which version we're working with.
export DISABLE_BCOLZ_AVX2=true
python -m pip install -U pip setuptools $@

# Install external requirements first: if they share any of our
# transitive dependencies, we want our pinned versions to win.
if [ "${EXTERNAL_REQUIREMENTS:-}" ]; then
  # Note: If EXTERNAL_REQUIREMENTS is unset, the expression in the
  # above test expands to the empty string, which fails the test.
  # (Simply expanding $EXTERNAL_REQUIREMENTS causes an error with the
  # -u option, which helps prevent many other kinds of errors.)
  echo "Installing additional packages: $EXTERNAL_REQUIREMENTS"
  python -m pip install "$EXTERNAL_REQUIREMENTS" $@
fi

# These have to be installed first so that the other requirements can be
# compiled against the specific versions we use.
#python -m pip install -r etc/requirements_build.in -c etc/requirements_py38_locked.txt $@
python -m pip install -r etc/requirements_build.in

# XXX: bcolz has to be compiled against our specific version of numpy:
# by default, it uses an incompatible pre-compiled binary.
pip install git+https://github.com/stefan-jansen/bcolz.git --no-binary :all
python -m pip install -e .[all]

echo
echo "Installation complete! Try running 'zipline --help'."
echo
